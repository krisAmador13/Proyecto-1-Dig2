#include <Arduino.h>
#include "config.h"
//#include "Adafruit_MQTT.h"
#include <stdint.h>
#include <driver/adc.h>
#include "driver/ledc.h"
#include "AdafruitIO_WiFi.h"
//Definimos variables correspondientes a los PWM
int res = 16;
int freq = 50;
#define PWM1_Pin 7
#define PWM2_Pin 9
#define PWM3_Pin 10
#define PWM4_Pin 11
//Definimos lo necesario para ejecutar ADAFRUIT
AdafruitIO_Feed *termometro= io.feed("sensor");
// Definimos los pines
#define sensor_t 34
#define bot_T 35
#define LED_rojo 27
#define LED_verde 25
#define LED_anaranjado 33
#define servo 19
#define transistor 26

// Declaramos variables para semaforo 
float voltaje_T = 0;
int valor_A = 0;
float Temp = 0;
float temperatura = 0;
int decenas = 0, unidades = 0, decimal = 0; 

//Establecemos las variables a usar para pasar datos al display de 7 segmentos 
#define pinA 4
#define pinF 2
#define pinB 15
#define pinD 22
#define pinE 23
#define pinC 18
#define pinP 21
#define pinG 5
#define Disp_1 13
#define Disp_2 12
#define Disp_3 14
int segments[10][7] = {
  {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, LOW},  // 0
  {LOW, HIGH, HIGH, LOW, LOW, LOW, LOW},      // 1
  {HIGH, HIGH, LOW, HIGH, HIGH, LOW, HIGH},   // 2
  {HIGH, HIGH, HIGH, HIGH, LOW, LOW, HIGH},   // 3
  {LOW, HIGH, HIGH, LOW, LOW, HIGH, HIGH},    // 4
  {HIGH, LOW, HIGH, HIGH, LOW, HIGH, HIGH},   // 5
  {HIGH, LOW, HIGH, HIGH, HIGH, HIGH, HIGH},  // 6
  {HIGH, HIGH, HIGH, LOW, LOW, LOW, LOW},     // 7
  {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH}, // 8
  {HIGH, HIGH, HIGH, HIGH, LOW, HIGH, HIGH}   // 9
};
int pins[7] = {pinA, pinB, pinC, pinD, pinE, pinF, pinG};

// Se establece lo pertinente para poder iniciar la interrupción 
portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;
unsigned long bot_T_lastlL = 0;
unsigned long t_rebote = 5;
volatile int lectura = 0;

// Declaramos funciones 
float Tem_lect();
void IRAM_ATTR bot_T_ISR();
void Temp_separada(float temperatura, int &decenas, int &unidades, int &decimal);
void initPWM1();
void initPWM2();
void initPWM3();
void initPWM4();
void servo_F();
void LEDS();
void Disp_7seg(uint8_t valor);

void setup() {
  // Iniciamos comunicación serial 
  Serial.begin(115200);
  while(! Serial);
  Serial.print("Connecting to Adafruit IO");
  // connect to io.adafruit.com
  io.connect();
   while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  // Vemos si nos conectamos 
  Serial.println();
  Serial.println(io.statusText());
//Se establecen los pines de entradas y salidas//
  pinMode(sensor_t, INPUT);
  pinMode(bot_T, INPUT_PULLUP);
  pinMode(servo,OUTPUT);
  pinMode(LED_rojo,OUTPUT);
  pinMode(LED_verde, OUTPUT);
  pinMode(LED_anaranjado, OUTPUT);
  pinMode(pinA, OUTPUT);
  pinMode(pinB, OUTPUT);
  pinMode(pinC, OUTPUT);
  pinMode(pinD, OUTPUT);
  pinMode(pinE, OUTPUT);
  pinMode(pinF, OUTPUT);
  pinMode(pinG, OUTPUT);
  pinMode(pinP,OUTPUT);
  pinMode(Disp_1,OUTPUT);
  pinMode(Disp_2,OUTPUT);
  pinMode(Disp_3,OUTPUT);
  pinMode(transistor, OUTPUT);
  digitalWrite(transistor, HIGH);
//Iniciamos las funciones de PWM
initPWM1();
initPWM2();
initPWM3();
initPWM4();
//Iniciamos la interrupción 
attachInterrupt(digitalPinToInterrupt(bot_T), bot_T_ISR, RISING);
}

void loop() {
  
    
  lectura = digitalRead(bot_T);
  //Serial.print(lectura); 
  //delay(5);
  if (lectura == 1) {
    Temp = Tem_lect();
    //Envio de datos a adafruit 
    Serial.print("sending -> ");
    Serial.println(Temp);
    termometro->save(Temp);
    //delay(3000);
    Temp_separada(Temp, decenas, unidades, decimal); // Llamada a la función con parámetros por referencia
    servo_F();//Se manda a llamar la función de comportamiento del servo para ser ejecutada
    LEDS();//Se manda a llamar la función de comportamiento de los leds para ser ejecutada
    lectura=0;
     io.run();
  }
    Serial.print(Temp);
    Serial.print("\n");
    //Serial.print(sensor_t);
    Serial.print(lectura);
    Serial.print("\n");
    Serial.print( voltaje_T);
    //Serial.print(decenas);
    //Serial.print(unidades);
    //Serial.print(decimal);
    Serial.print("\n");
    //delay(100);
    //Realizamos el multiplexado, escoges que queremos que se muestre en cada display 
    digitalWrite(Disp_1, HIGH);
    digitalWrite(Disp_2, LOW);
    digitalWrite(Disp_3,LOW);
    digitalWrite(pinP, LOW);
    Disp_7seg(decenas);
    delay(7);

    digitalWrite(Disp_1, LOW);
    digitalWrite(Disp_2, HIGH);
    digitalWrite(Disp_3,LOW);
    digitalWrite(pinP, LOW);
    if (decimal > 0 || decenas > 0){
      digitalWrite(pinP, HIGH);
    }
    Disp_7seg(unidades);
    delay(7);

    if (decimal > 0 || decenas > 0) {  // Mostrar el decimal si es mayor a 0 o si hay decenas, si no hay el display no se encenderá 
    digitalWrite(Disp_1, LOW);
    digitalWrite(Disp_2, LOW);
    digitalWrite(Disp_3, HIGH);
    Disp_7seg(decimal);
    digitalWrite(pinP,LOW);
    delay(7);
   
}
}


/*La función de temperatura nos permite leer el sensor y convertir sus valores a temperatura */
float Tem_lect() {
  int valor_A = analogRead(sensor_t);
  voltaje_T = ((valor_A*3300)/4095);
  temperatura = ((voltaje_T)/10)+20; 
  return temperatura;
}

// Establecemos función de interrupción 
/*En esta función establecemos que cuando se presione el botón la variable lectura tomará el valor de 1
esto permite que mediante el uso del botón se activen ciertos componentes*/
void IRAM_ATTR bot_T_ISR(void) {
  unsigned long currentTime = millis();
  if (currentTime - bot_T_lastlL > t_rebote) {
    portENTER_CRITICAL_ISR(&mux);
    lectura = 1;
    Serial.println("Interrupción activada");
    portEXIT_CRITICAL_ISR(&mux);
    bot_T_lastlL = currentTime;
  }
}
/*Temp_Separada es la función que nos permite tomar la temperatura leida
y separarla en decenas, unidades y decimales para poder imprimir el valor en displays separados*/
void Temp_separada(float temperatura, int &decenas, int &unidades, int &decimal) {
  int parteEntera = (int)temperatura; // Extraer la parte entera de la temperatura
  decimal = (int)((temperatura - parteEntera) * 10); // Extraer el primer decimal
  decenas = parteEntera / 10; // Calcular las decenas
  unidades = parteEntera % 10; // Calcular las unidades
}
/*Se establecen las funciones de PWM para enviar señal al motor servo y a los leds, se emplea una señal
para cada salida utilizando los pines del 0 al 15*/
void initPWM1(void){
ledcSetup(PWM1_Pin, freq, res);//Establecemos la señal PWM para el servo 
ledcAttachPin(servo, PWM1_Pin); //Le mandamos la señal de PWM al servo
ledcWrite(PWM1_Pin,0);
}
void initPWM2(void){
ledcSetup(PWM2_Pin, freq, res);//Establecemos la señal PWM para led
ledcAttachPin(LED_rojo, PWM2_Pin); //Le mandamos la señal de PWM al led rojo 
}
void initPWM3(void){
ledcSetup(PWM3_Pin, freq, res);//Establecemos la señal PWM para led
ledcAttachPin(LED_verde, PWM3_Pin); //Le mandamos la señal de PWM al led verde
}
void initPWM4(void){
ledcSetup(PWM4_Pin, freq, res);//Establecemos la señal PWM para led
ledcAttachPin(LED_anaranjado, PWM4_Pin); //Le mandamos la señal de PWM al led azul 
}
/*La función servo delimita el comportamiento de la salida basado en determinadas condiciones, es decir
dependiendo del valor qiue emita el sensor cambiará la posición del servo. Se definen determinados rangos para lograr esto */
void servo_F(){
  if (Temp < 37) {
    ledcWrite(PWM1_Pin,1638);   //El servo se moverá con un dutycicle de 27 si la temperatura es menor a 37 
    delay(1000);
  } 
  else if (Temp >= 37 && Temp < 37.5) {
    ledcWrite(PWM1_Pin,3277); //El servo se moverá con un dutycicle de 77 si la temperatura es mayor a 37 y  menor a 37.5 
    delay(1000);
  } 
  else if (Temp >= 37.5) {
    ledcWrite(PWM1_Pin,4915); //El servo se moverá con un dutycicle de 128 si la temperatura es mayor a 37.5
    delay(1000);
}
}
/*La función LEDS funciona similar a la función servo_F delimitando el 
encendido y apagado de las leds de acuerdo a las mismas condiciones establecidas para el servo*/
void LEDS(){
  if (Temp < 37) {    
    ledcWrite(PWM2_Pin, 255);  // 50% ciclo de trabajo
    ledcWrite(PWM3_Pin, 0);
    ledcWrite(PWM4_Pin, 0);
    
  } else if (Temp >= 37 && Temp < 37.5) {
    ledcWrite(PWM2_Pin, 0);
    ledcWrite(PWM3_Pin, 255);
    ledcWrite(PWM4_Pin, 0);
    
  } else if (Temp >= 37.5) {
    ledcWrite(PWM2_Pin, 0);
    ledcWrite(PWM3_Pin, 0);
    ledcWrite(PWM4_Pin, 255);
    
  }
}
/*La función Disp_7seg emplea un ciclo for para recorrer dos arreglos de delimitan el pin del display y el estado del mismo
(encendido o apagado) para poder mostrar los datos leidos por el sensor*/
 void Disp_7seg(uint8_t valor){
  for (int i = 0; i < 7; i++) {
    digitalWrite(pins[i], segments[valor][i]);
  
  }
 }   

